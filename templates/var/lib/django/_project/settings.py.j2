# {{ ansible_managed }}
# ansibleguy.infra_django_apache

from pathlib import Path
from os import path as os_path
from os import environ as os_environ
from socket import socket, AF_INET, SOCK_DGRAM

# get ip of current host
s = socket(AF_INET, SOCK_DGRAM)
s.connect(('1.1.1.1', 53))
OWN_IP = s.getsockname()[0]
s.close()

# Variables from role
DB_CONFIG = '{{ site.database.config }}'
ALLOWED_HOSTS = [OWN_IP, 'localhost', '{{ site.domain }}'{% for alias in site.aliases %}, '{{ alias }}' {% endfor %}]
PROJECT = '{{ project }}'
STATIC_ROOT = '{{ path_static }}/'
STATIC_URL = '{{ site.static_url }}/'

# Security relevant
SECRET_KEY = '{{ lookup('password', '/dev/null chars=ascii_letters,digits length=50') }}'
DEBUG = True

{% raw %}
# Basic config
BASE_DIR = Path(__file__).resolve().parent.parent
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = f'{PROJECT}.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = f'{PROJECT}.wsgi.application'

# Database
{% endraw %}
{% if site.database.type in ['pgsql', 'postgres'] %}
if 'PGPASSFILE' not in os_environ:
    os_environ['PGPASSFILE'] = os_path.join(BASE_DIR, DB_CONFIG)
{% endif %}

DATABASES = {
    'default': {
{% if site.database.type in ['mysql', 'mariadb'] %}
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': os_path.join(BASE_DIR, DB_CONFIG),
        },
{% elif site.database.type in ['pgsql', 'postgres'] %}
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
{% else %}
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os_path.join(BASE_DIR, 'db.sqlite3'),
{% endif %}
{% raw %}

    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Re-map error handler functions
#   handler500 = 'app.handlers.handler500'
#   handler403 = 'app.handlers.handler403'
#   handler404 = 'app.handlers.handler404'
{% endraw %}
