---

- name: "Django | Site '{{ name }}' | Showing debug info - user provided config"
  ansible.builtin.debug:
    var: site_item.value
  when: debug | bool

- name: "Django | Site '{{ name }}' | Showing debug info - running config"
  ansible.builtin.debug:
    var: site
  when: debug | bool

- name: "Django | Site '{{ name }}' | Configuring site"
  ansible.builtin.template:
    src: 'templates/etc/apache2/sites-available/django.conf.j2'
    dest: "/etc/apache2/sites-available/site_{{ name }}_app.conf"
    owner: 'root'
    group: 'root'
    mode: 0644
  tags: [sites, django]

- name: "Django | Site '{{ name }}' | Create django directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: 0755
  loop:
    - "{{ path }}"
    - "{{ site.path_venv }}"
    - "{{ path_static }}"
  tags: [sites, django]

- name: "Django | Site '{{ name }}' | Getting database socket"
  ansible.builtin.set_fact:
    mysql_socket: "/run/mysqld/mysqld_{{ site.database.socket | default(name, true) }}.sock"
  when: "site.database.type in ['mysql', 'mariadb']"
  tags: [sites, config, db, django]

- name: "Django | Site '{{ name }}' | Checking if database client config exists"
  ansible.builtin.stat:
    path: "{{ path }}/{{ site.database.config }}"
  register: django_db_config_raw
  tags: [sites, config, db, django]

- name: "Django| | Site '{{ name }}' | Configuring database connection for mysql/mariadb"
  ansible.builtin.template:
    src: 'templates/var/lib/django/mysql_db.cnf.j2'
    dest: "{{ path }}/{{ site.database.config }}"
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: "{{ site.database.config_mode }}"
  when:
    - not django_db_config_raw.stat.exists or site.database.update_pwd == 'always'
    - "site.database.type in ['mysql', 'mariadb']"
  tags: [sites, config, db, django]

- name: "Django| | Site '{{ name }}' | Configuring database connection for pgsql"
  ansible.builtin.template:
    src: 'templates/var/lib/django/pgsql_db.cnf.j2'
    dest: "{{ path }}/{{ site.database.config }}"
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: "{{ site.database.config_mode }}"
  when:
    - not django_db_config_raw.stat.exists or site.database.update_pwd == 'always'
    - "site.database.type in ['pgsql', 'postgres']"
  tags: [sites, config, db, django]

- name: "Django| | Site '{{ name }}' | Copying db update script"
  ansible.builtin.template:
    src: "templates/var/lib/django/update_schema.sh.j2"
    dest: "{{ site.path_venv }}/update_schema.sh"
    owner: 'root'
    group: 'root'
    mode: 0755
  tags: [sites]

- name: "Django| | Site '{{ name }}' | Installing python3 base-modules"
  ansible.builtin.pip:
    name: "{{ DJANGO_CONFIG.python_modules.base }}"
    virtualenv: "{{ site.path_venv }}"
    virtualenv_python: "{{ pyver }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: present
  register: django_venv_create_raw
  tags: [sites, django]

- name: "Django| | Site '{{ name }}' | Installing mysql/mariadb python modules"
  ansible.builtin.pip:
    name: "{{ DJANGO_CONFIG.python_modules.mysql }}"
    virtualenv: "{{ site.path_venv }}"
    virtualenv_python: "{{ pyver }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: present
  when: "site.database.type in ['mysql', 'mariadb']"
  tags: [sites, django]

- name: "Django| | Site '{{ name }}' | Installing postgres python modules"
  ansible.builtin.pip:
    name: "{{ DJANGO_CONFIG.python_modules.pgsql }}"
    virtualenv: "{{ site.path_venv }}"
    virtualenv_python: "{{ pyver }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: present
  when: "site.database.type in ['pgsql', 'postgres']"
  tags: [sites, django]

- name: "Django| | Site '{{ name }}' | Installing custom python modules"
  ansible.builtin.pip:
    name: "{{ module }}"
    virtualenv: "{{ site.path_venv }}"
    virtualenv_python: "{{ pyver }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: present
  when:
    - module not in site.python_modules.absent
    - site.python_modules.present | length > 0
  loop_control:
    loop_var: module
  loop: "{{ site.python_modules.present }}"
  tags: [sites, django]

- name: "Django| | Site '{{ name }}' | Removing python modules"
  ansible.builtin.pip:
    name: "{{ site.python_modules.absent }}"
    virtualenv: "{{ site.path_venv }}"
    virtualenv_python: "{{ pyver }}"
    virtualenv_command: '/usr/bin/virtualenv'
    state: absent
  when: site.python_modules.absent | length > 0
  tags: [sites, django]

- name: "Django| | Site '{{ name }}' | Initializing django project"
  ansible.builtin.shell: "source {{ site.path_venv }}/bin/activate &&
  {{ site.path_venv }}/bin/django-admin startproject {{ project }} {{ path }}"
  args:
    executable: '/bin/bash'
    chdir: "{{ path }}"
    creates: "{{ path }}/{{ project }}"
  environment:
    PYTHONPATH: "{{ path }}:{{ site.path_venv }}/lib/python{{ pyver }}/site-packages{% for pypath in site.env_pythonpath %}:{{ pypath }}{% endfor %}"
    DJANGO_SETTINGS_MODULE: "{{ project }}.settings"
  when: not site.sync_code.enabled
  tags: [sites, db, django]

- name: "Django| | Site '{{ name }}' | Checking if settings file exists"
  ansible.builtin.stat:
    path: "{{ path }}/{{ project }}/settings.py"
  register: django_settings_raw
  tags: [sites, db, django]

- name: "Django| | Site '{{ name }}' | Deploying initial settings"
  ansible.builtin.template:
    src: "templates/var/lib/django/_project/settings.py.j2"
    dest: "{{ path }}/{{ project }}/settings.py"
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: 0550
  when:
    - django_venv_create_raw.changed
    - not django_settings_raw.stat.exists
  tags: [sites, db, django]

- name: "Django| | Site '{{ name }}' | Building database schema"
  ansible.builtin.shell: "source {{ site.path_venv }}/bin/activate &&
  {{ site.path_venv }}/bin/python3 manage.py makemigrations"
  args:
    executable: '/bin/bash'
    chdir: "{{ path }}"
  environment:
    PYTHONPATH: "{{ path }}:{{ site.path_venv }}/lib/python{{ pyver }}/site-packages{% for pypath in site.env_pythonpath %}:{{ pypath }}{% endfor %}"
    DJANGO_SETTINGS_MODULE: "{{ project }}.settings"
  when: django_venv_create_raw.changed
  changed_when: false
  tags: [sites, sync, db, django]

- name: "Django| | Site '{{ name }}' | Migrating database schema"
  ansible.builtin.shell: "source {{ site.path_venv }}/bin/activate &&
  {{ site.path_venv }}/bin/python3 manage.py migrate"
  args:
    executable: '/bin/bash'
    chdir: "{{ path }}"
  environment:
    PYTHONPATH: "{{ path }}:{{ site.path_venv }}/lib/python{{ pyver }}/site-packages{% for pypath in site.env_pythonpath %}:{{ pypath }}{% endfor %}"
    DJANGO_SETTINGS_MODULE: "{{ project }}.settings"
  changed_when: false
  when: django_venv_create_raw.changed
  tags: [sites, sync, db, django]

- name: "Django| | Site '{{ name }}' | Collecting default static files"
  ansible.builtin.shell: "source {{ site.path_venv }}/bin/activate &&
  {{ site.path_venv }}/bin/python3 manage.py collectstatic --no-input"
  args:
    executable: '/bin/bash'
    chdir: "{{ path }}"
  environment:
    PYTHONPATH: "{{ path }}:{{ site.path_venv }}/lib/python{{ pyver }}/site-packages{% for pypath in site.env_pythonpath %}:{{ pypath }}{% endfor %}"
    DJANGO_SETTINGS_MODULE: "{{ project }}.settings"
  changed_when: false
  when:
    - django_venv_create_raw.changed
    - site.collectstatic
  tags: [sites, sync, db, django]
  ignore_errors: true

- name: "Django| | Site '{{ name }}' | Getting current user"
  ansible.builtin.command: 'whoami'
  become: false
  changed_when: false
  check_mode: false
  register: run_user_raw
  tags: [sites, sync, django]

- name: "Django| | Site '{{ name }}' | Adding temporary sync privileges"
  ansible.builtin.template:
    src: 'templates/etc/sudoers.d/sync.j2'
    dest: '/etc/sudoers.d/ansible_ansibleguy_infra_django_apache'
    validate: '/usr/sbin/visudo -cf %s'
    mode: 0640
    owner: 'root'
    group: 'root'
  tags: [sites, sync, django]
  when: run_user_raw.stdout != 'root'

- name: "Django| | Site '{{ name }}' | Syncing code"
  ansible.posix.synchronize:
    src: "{{ site.sync_code.src }}"
    dest: "{{ site.sync_code.dst | default(path, true) }}/"
    recursive: yes
    delete: yes
    rsync_path: 'sudo rsync'
    rsync_opts: "{{ site.sync_code.options }}"
  when:
    - site.sync_code.enabled
    - site.sync_code.src | default(none, true) is not none
  tags: [sites, sync, django]

- name: "Django| | Site '{{ name }}' | Syncing static files"
  ansible.posix.synchronize:
    src: "{{ site.sync_code.static_src }}"
    dest: "{{ site.sync_code.static_dst | default(path_static, true) }}/"
    recursive: yes
    delete: yes
    rsync_path: 'sudo rsync'
    rsync_opts: "{{ site.sync_code.options }}"
  when:
    - site.sync_code.enabled
    - site.sync_code.static_src | default(none, true) is not none
  tags: [sites, sync, django]

- name: "Django| | Site '{{ name }}' | Removing temporary sync privileges"
  ansible.builtin.file:
    path: '/etc/sudoers.d/ansible_ansibleguy_infra_django_apache'
    state: absent

- name: "Django| | Site '{{ name }}' | Updating privileges for code"
  ansible.builtin.file:
    path: "{{ site.sync_code.dst | default(path, true) }}"
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: 0550
    recurse: true
  tags: [sites, sync, django]

- name: "Django| | Site '{{ name }}' | Updating privileges for static files"
  ansible.builtin.file:
    path: "{{ site.sync_code.static_dst | default(path_static, true) }}"
    owner: "{{ DJANGO_CONFIG.user }}"
    group: "{{ DJANGO_CONFIG.group }}"
    mode: 0755
    recurse: true
  tags: [sites, sync, django]

- name: "Django| | Site '{{ name }}' | Cleaning up temporary password file"
  ansible.builtin.file:
    path: "{{ tmp_pwd_file_prefix }}{{ name }}_mdb"
    state: absent
  delegate_to: localhost
  become: false
  changed_when: false
